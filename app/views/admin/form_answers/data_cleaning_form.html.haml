= form_tag(data_cleaning_admin_form_answer_path(@form_answer), :method => :post, :class => 'formtastic form') do
  = hidden_field_tag('field_id', @field_id)
  = hidden_field_tag('field_type', @field_spec['type'])

  = field_set_tag(('<span>Clean Variable '+@field_id+'</span>').html_safe, :class => 'inputs') do
    %ol
      - case @field_spec['type']
      - when 'roi'
        = hidden_field_tag('cleaned_value[location]', @field_value.delete('location').to_json)
        - @field_spec['roi_values'].each do |key, label|
          %li.input.string.stringish
            = label_tag('cleaned_value['+key+']', "#{label} (#{key}):")
            = text_field_tag('cleaned_value['+key+']', @field_value[key])
      - else
        %li.input.string.stringish
          = label_tag('cleaned_value', @field_id)
          = text_field_tag('cleaned_value', ((@field_spec['type'] == 'select_multiple' and @field_value.respond_to?(:join)) ? @field_value.join(',') : @field_value))

  = field_set_tag('<span>Value encoding</span>'.html_safe, :class => 'inputs') do
    %div{:style => 'margin: 0 20px;'}
      - case @field_spec['type']
      - when 'select', 'select_multiple'
        %p{:style => 'margin-bottom: 1em;'}
          Select fields encode each choice as a specific code. Below is the assignment of choices to codes for this field. Please enter the code of the correct choice above.
          - if @field_spec['type'] == 'select_multiple'
            Values for select_multiple fields are specified as a comma-separated list of codes.
        %ul{:style => 'list-style-type: disc; list-style-position: outside; padding-left: 20px;'}
          - @field_spec['values'].each do |encoding, choice|
            %li= (choice + ' ' + icon(:arrow_right) + ' ' + encoding).html_safe
      - when 'string', 'text'
        %p All text is saved 'as-is' into the database.
      - when 'number'
        %p Numbers must be entered with a '.' as the decimal separator.
      - when 'date'
        %p Date values are specified in the format 'DD-MM-YYYY'.
      - when 'bool'
        %p Boolean values are encoded as 'true' for a positive (Yes) answer and 'false' for a negative (No) answer.

  = field_set_tag(('<span>Signature Password</span>').html_safe, :class => 'inputs') do
    %ol
      %li.input.string
        = label_tag('signature_password', 'Signature Password')
        = password_field_tag('signature_password')


  = field_set_tag(nil, :class => 'actions') do
    %ol
      %li.action.input_action
        = submit_tag('Save changed value')
      %li.cancel
        = link_to('Cancel', admin_form_answer_path(@form_answer))
